=begin
#JumpCloud APIs

# JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.

OpenAPI spec version: 2.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require 'date'

module JCAPIv2

  class SystemInsightsCrashes
    attr_accessor :crash_path

    attr_accessor :crashed_thread

    attr_accessor :datetime

    attr_accessor :exception_codes

    attr_accessor :exception_notes

    attr_accessor :exception_type

    attr_accessor :identifier

    attr_accessor :parent

    attr_accessor :path

    attr_accessor :pid

    attr_accessor :registers

    attr_accessor :responsible

    attr_accessor :stack_trace

    attr_accessor :type

    attr_accessor :uid

    attr_accessor :version


    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'crash_path' => :'crash_path',
        :'crashed_thread' => :'crashed_thread',
        :'datetime' => :'datetime',
        :'exception_codes' => :'exception_codes',
        :'exception_notes' => :'exception_notes',
        :'exception_type' => :'exception_type',
        :'identifier' => :'identifier',
        :'parent' => :'parent',
        :'path' => :'path',
        :'pid' => :'pid',
        :'registers' => :'registers',
        :'responsible' => :'responsible',
        :'stack_trace' => :'stack_trace',
        :'type' => :'type',
        :'uid' => :'uid',
        :'version' => :'version'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'crash_path' => :'String',
        :'crashed_thread' => :'String',
        :'datetime' => :'String',
        :'exception_codes' => :'String',
        :'exception_notes' => :'String',
        :'exception_type' => :'String',
        :'identifier' => :'String',
        :'parent' => :'String',
        :'path' => :'String',
        :'pid' => :'String',
        :'registers' => :'String',
        :'responsible' => :'String',
        :'stack_trace' => :'String',
        :'type' => :'String',
        :'uid' => :'Integer',
        :'version' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}){|(k,v), h| h[k.to_sym] = v}

      if attributes.has_key?(:'crash_path')
        self.crash_path = attributes[:'crash_path']
      end

      if attributes.has_key?(:'crashed_thread')
        self.crashed_thread = attributes[:'crashed_thread']
      end

      if attributes.has_key?(:'datetime')
        self.datetime = attributes[:'datetime']
      end

      if attributes.has_key?(:'exception_codes')
        self.exception_codes = attributes[:'exception_codes']
      end

      if attributes.has_key?(:'exception_notes')
        self.exception_notes = attributes[:'exception_notes']
      end

      if attributes.has_key?(:'exception_type')
        self.exception_type = attributes[:'exception_type']
      end

      if attributes.has_key?(:'identifier')
        self.identifier = attributes[:'identifier']
      end

      if attributes.has_key?(:'parent')
        self.parent = attributes[:'parent']
      end

      if attributes.has_key?(:'path')
        self.path = attributes[:'path']
      end

      if attributes.has_key?(:'pid')
        self.pid = attributes[:'pid']
      end

      if attributes.has_key?(:'registers')
        self.registers = attributes[:'registers']
      end

      if attributes.has_key?(:'responsible')
        self.responsible = attributes[:'responsible']
      end

      if attributes.has_key?(:'stack_trace')
        self.stack_trace = attributes[:'stack_trace']
      end

      if attributes.has_key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.has_key?(:'uid')
        self.uid = attributes[:'uid']
      end

      if attributes.has_key?(:'version')
        self.version = attributes[:'version']
      end

    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      return invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          crash_path == o.crash_path &&
          crashed_thread == o.crashed_thread &&
          datetime == o.datetime &&
          exception_codes == o.exception_codes &&
          exception_notes == o.exception_notes &&
          exception_type == o.exception_type &&
          identifier == o.identifier &&
          parent == o.parent &&
          path == o.path &&
          pid == o.pid &&
          registers == o.registers &&
          responsible == o.responsible &&
          stack_trace == o.stack_trace &&
          type == o.type &&
          uid == o.uid &&
          version == o.version
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [crash_path, crashed_thread, datetime, exception_codes, exception_notes, exception_type, identifier, parent, path, pid, registers, responsible, stack_trace, type, uid, version].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map{ |v| _deserialize($1, v) } )
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = JCAPIv2.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map{ |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
